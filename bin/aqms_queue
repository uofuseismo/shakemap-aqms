#! /usr/bin/env python

# System imports
import os
import os.path
import sys
import logging
from logging.handlers import TimedRotatingFileHandler
import socket
import argparse
from datetime import datetime

# Third-party imports
import daemon
import lockfile

# Local imports
from shakemap.utils.config import get_config_paths
from shakelib.rupture import constants  # added by GG
import shakemap.utils.queue as queue
from shakemap_aqms.aftershock import aftershockDB
from shakemap_aqms.util import (get_aqms_config,
                                get_eqinfo)


def get_logger(logpath, attached):
    """Set up a logger for this process.

    Args:
        logpath (str): Path to the directory into which to put the logfile.

    Returns:
        logging.logger: An instance of a logger.
    """
    logger = logging.getLogger('aqms_queue_logger')
    logger.setLevel(logging.INFO)
    if not attached:
        logfile = os.path.join(logpath, 'aqms_queue.log')
        handler = TimedRotatingFileHandler(logfile,
                                           when='midnight',
                                           backupCount=60)
        formatter = logging.Formatter(
                fmt='%(asctime)s - %(levelname)s - %(message)s',
                datefmt='%Y-%m-%d %H:%M:%S')
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        logger.propagate = False
    else:
        handler = logging.StreamHandler()
        formatter = logging.Formatter(
                fmt='%(asctime)s - %(levelname)s - %(message)s',
                datefmt='%Y-%m-%d %H:%M:%S')
        handler.setFormatter(formatter)
        logger.addHandler(handler)
    return logger


class Dummycontext(object):
    def __enter__(self): return self

    def __exit__(*x): pass


def get_context(context, attached):
    if attached:
        return Dummycontext()
    else:
        return context


def get_parser():
    """Make an argument parser.

    Returns:
        ArgumentParser: an argparse argument parser.
    """
    description = """
    Run a daemon process to accept alarm and cancel mmessages
    and send the resulting data to sm_queue.
    """
    parser = argparse.ArgumentParser(
        description=description,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-a', '--attached', action='store_true',
                        help='Inhibit daemonization and remain attached '
                             'to the terminal (for testing).')
    return parser


def main(pargs):

    install_path, data_path = get_config_paths()

    aqms_conf = get_aqms_config()
    queue_conf = get_aqms_config('aqms_queue')

    sm_queue_config = queue.get_config(install_path)

    if 'localhost' not in queue_conf['servers']:
        queue_conf['servers'].append('localhost')
    aftershockThreshold = float(queue_conf['aftershock'])
    #
    # Turn this process into a daemon
    #
    logpath = os.path.join(install_path, 'logs')
    if not os.path.isdir(logpath):
        os.makedirs(logpath)
    pidfile = os.path.join(logpath, 'aqms_queue.pid')
    context = daemon.DaemonContext(
            working_directory=data_path,
            pidfile=lockfile.FileLock(pidfile))

    with get_context(context, pargs.attached):
        logger = get_logger(logpath, pargs.attached)
        #
        # Create/retrieve the database for aftershock suppression
        #
        aftershockDBobj = None
        if aftershockThreshold > 0:  # aftershock flag is set, load the DB
            aftershockDBobj = aftershockDB(install_path)            
        #
        # Create the socket
        #
        qsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        qsocket.bind(('', queue_conf['port']))
        # Set a timeout so that we can occasionally look for other
        # things to do
        qsocket.settimeout(30)
        qsocket.listen(5)

        logger.info('aqms_queue initiated')

        while True:
            #
            # Now wait for a connection
            #
            try:
                (clientsocket, address) = qsocket.accept()
            except socket.timeout:
                #
                # Normal timeout; do routine tasks and then go
                # back to waiting for a connection
                #
                continue
            #
            # Got a connection
            #
            hostname, _, _ = socket.gethostbyaddr(address[0])
#            hostname = socket.getfqdn(hostname)
            logger.info('Got connection from %s at port %s' %
                        (hostname, address[1]))

            if hostname not in queue_conf['servers']:
                logger.warning('Connection from %s refused: not in valid '
                               'servers list' % hostname)
                clientsocket.close()
                continue

            #
            # The accept() should guarantee that there's something
            # to read, but something could go wrong...
            #
            try:
                clientsocket.settimeout(10)
                data = clientsocket.recv(queue.MAX_SIZE)
            except socket.timeout:
                logger.warning('Did not get data from connection, continuing')
                clientsocket.close()
                continue
            else:
                clientsocket.close()
            #
            # Decode the data and do something
            #
            action, eventid, update = data.decode('utf-8').split(maxsplit=2)

            if action == 'shake_alarm':
                logger.info('Got shake_alarm for event %s' % eventid)
                event = get_eqinfo(eventid, aqms_conf, logger)

                if event is None:
                    logger.warning("Couldn't find event %s in database" %
                                   eventid)
                    continue

                # check if event is in aftershock zone and needs suppression
                logger.info('Event mag is %f' % event.get('mag'))
                eventID = event.get("netid") + str(event.get("id"))
                emaglimit = float(queue_conf['emaglimit'])
                logger.info('emaglimit configuration set to %f' % emaglimit)
                aftershockDict = {"lat": event.get('lat'), "lon": event.get('lon'), "eventID": eventID, "mag": event.get('mag'), "emaglimit": emaglimit}

                if (aftershockDBobj is not None):
                    # first let's check and clean up old aftershock zones first
                    returnVal = aftershockDBobj.cleanupAftershockZones(emaglimit)
                    logger.info('Aftershock zone cleanup finished')
  
                    zoneTuple = aftershockDBobj.checkAftershockZone(aftershockDict)
                    if zoneTuple[0] == 1:    # this event is in an exclusion zone and below limit, skip
                        logger.warning("Event is in an aftershock zone and below the exclusion limit, will skip")
                        continue

                    # define aftershock zone if necessary
                    if event.get('mag') >= aftershockThreshold and aftershockThreshold > 0:
                        # let's attempt to define a new aftershock zone
                        logger.warning("Event is over M%3.1f, do aftershock define for event %s" %  (aftershockThreshold, eventID))
                        returnVal = aftershockDBobj.defineAftershockZone(aftershockDict)

                try:
                    # Shakemap code keeps value as datetime, need string for JSON parsing by queue
                    dt = event['time']
                    event['time'] = dt.strftime(constants.TIMEFMT)
                    queue.send_queue('origin', event, sm_queue_config['port'])
                except Exception as e:
                    logger.error("Couldn't send event %s to sm_queue" %
                                 eventid)
                    logger.error(e)
                else:
                    logger.info('Sent event %s to sm_queue' % eventid)
            elif action == 'shake_cancel':
                logger.info('Got shake_cancel for event %s' % eventid)
                try:
                    queue.send_queue('cancel', {'id': eventid},
                                     sm_queue_config['port'])
                except Exception:
                    logger.error("Couldn't send cancel event %s to sm_queue" %
                                 eventid)
                else:
                    logger.info('Sent cancel event %s to sm_queue' % eventid)
            else:
                logger.warning('Unknown action: %s; ignoring' % action)


if __name__ == '__main__':

    parser = get_parser()
    pargs = parser.parse_args()

    main(pargs)
